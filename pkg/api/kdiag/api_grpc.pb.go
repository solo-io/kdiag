// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kdiag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	// Stream Envoy access logs as they are captured.
	Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (Manager_RedirectClient, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (Manager_RedirectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[0], "/kdiag.yuval.dev.Manager/Redirect", opts...)
	if err != nil {
		return nil, err
	}
	x := &managerRedirectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manager_RedirectClient interface {
	Recv() (*RedirectResponse, error)
	grpc.ClientStream
}

type managerRedirectClient struct {
	grpc.ClientStream
}

func (x *managerRedirectClient) Recv() (*RedirectResponse, error) {
	m := new(RedirectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	// Stream Envoy access logs as they are captured.
	Redirect(*RedirectRequest, Manager_RedirectServer) error
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) Redirect(*RedirectRequest, Manager_RedirectServer) error {
	return status.Errorf(codes.Unimplemented, "method Redirect not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_Redirect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RedirectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).Redirect(m, &managerRedirectServer{stream})
}

type Manager_RedirectServer interface {
	Send(*RedirectResponse) error
	grpc.ServerStream
}

type managerRedirectServer struct {
	grpc.ServerStream
}

func (x *managerRedirectServer) Send(m *RedirectResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kdiag.yuval.dev.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Redirect",
			Handler:       _Manager_Redirect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kdiag/api.proto",
}
